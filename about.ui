<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>about</class>
 <widget class="QDialog" name="about">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>550</width>
    <height>600</height>
   </rect>
  </property>
  <property name="sizePolicy">
   <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
    <horstretch>0</horstretch>
    <verstretch>0</verstretch>
   </sizepolicy>
  </property>
  <property name="minimumSize">
   <size>
    <width>550</width>
    <height>600</height>
   </size>
  </property>
  <property name="maximumSize">
   <size>
    <width>550</width>
    <height>600</height>
   </size>
  </property>
  <property name="baseSize">
   <size>
    <width>0</width>
    <height>0</height>
   </size>
  </property>
  <property name="windowTitle">
   <string>About</string>
  </property>
  <property name="windowIcon">
   <iconset resource="Icons.qrc">
    <normaloff>:/icon/appIcon</normaloff>:/icon/appIcon</iconset>
  </property>
  <property name="sizeGripEnabled">
   <bool>false</bool>
  </property>
  <widget class="QLabel" name="Body_2">
   <property name="geometry">
    <rect>
     <x>110</x>
     <y>60</y>
     <width>421</width>
     <height>81</height>
    </rect>
   </property>
   <property name="font">
    <font>
     <family>Futura</family>
     <pointsize>10</pointsize>
    </font>
   </property>
   <property name="text">
    <string>     This program serves as a final project in discrete structures for Riverside City College. The purpose of the app is to demonstrate understanding of recursive sequences and series as well as sets. This project uses the recursive function discovered by Benoit Mandelbrot, Z(n+1) = Z(n)^2 + C, and renders values in the complex plane.</string>
   </property>
   <property name="alignment">
    <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
   </property>
   <property name="wordWrap">
    <bool>true</bool>
   </property>
   <property name="margin">
    <number>10</number>
   </property>
  </widget>
  <widget class="QLabel" name="Image">
   <property name="geometry">
    <rect>
     <x>20</x>
     <y>20</y>
     <width>81</width>
     <height>81</height>
    </rect>
   </property>
   <property name="text">
    <string/>
   </property>
   <property name="pixmap">
    <pixmap resource="Icons.qrc">:/icon/appIcon</pixmap>
   </property>
   <property name="scaledContents">
    <bool>true</bool>
   </property>
  </widget>
  <widget class="QPushButton" name="pushButton">
   <property name="geometry">
    <rect>
     <x>200</x>
     <y>540</y>
     <width>112</width>
     <height>32</height>
    </rect>
   </property>
   <property name="sizePolicy">
    <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
     <horstretch>0</horstretch>
     <verstretch>0</verstretch>
    </sizepolicy>
   </property>
   <property name="text">
    <string>OK</string>
   </property>
  </widget>
  <widget class="QLabel" name="Title">
   <property name="geometry">
    <rect>
     <x>120</x>
     <y>30</y>
     <width>281</width>
     <height>31</height>
    </rect>
   </property>
   <property name="font">
    <font>
     <family>Futura</family>
     <pointsize>18</pointsize>
     <weight>75</weight>
     <bold>true</bold>
    </font>
   </property>
   <property name="text">
    <string>About</string>
   </property>
  </widget>
  <widget class="QLabel" name="label">
   <property name="geometry">
    <rect>
     <x>120</x>
     <y>140</y>
     <width>151</width>
     <height>16</height>
    </rect>
   </property>
   <property name="font">
    <font>
     <family>Futura</family>
     <weight>75</weight>
     <bold>true</bold>
    </font>
   </property>
   <property name="text">
    <string>Coloring</string>
   </property>
  </widget>
  <widget class="QLabel" name="Body_4">
   <property name="geometry">
    <rect>
     <x>110</x>
     <y>160</y>
     <width>411</width>
     <height>121</height>
    </rect>
   </property>
   <property name="font">
    <font>
     <family>Futura</family>
     <pointsize>10</pointsize>
    </font>
   </property>
   <property name="text">
    <string>     By definition, a value can either be in a set or not. This begs the question, why does the fractal explorer contain a range of colors and not just two?

     The answer comes from coloring values ‘close’ to the set with a brightness ranging from complete brightness (white) to black (no darkness). Because colors are rendered using the HSV color model, any hue can be selected without affecting the value range described above.</string>
   </property>
   <property name="alignment">
    <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
   </property>
   <property name="wordWrap">
    <bool>true</bool>
   </property>
   <property name="margin">
    <number>10</number>
   </property>
  </widget>
  <widget class="QLabel" name="label_2">
   <property name="geometry">
    <rect>
     <x>120</x>
     <y>280</y>
     <width>111</width>
     <height>16</height>
    </rect>
   </property>
   <property name="font">
    <font>
     <family>Futura</family>
     <weight>75</weight>
     <bold>true</bold>
    </font>
   </property>
   <property name="text">
    <string>Why So Slow?</string>
   </property>
  </widget>
  <widget class="QLabel" name="Body_5">
   <property name="geometry">
    <rect>
     <x>110</x>
     <y>300</y>
     <width>401</width>
     <height>131</height>
    </rect>
   </property>
   <property name="font">
    <font>
     <family>Futura</family>
     <pointsize>10</pointsize>
    </font>
   </property>
   <property name="text">
    <string>     In order to determine if a value is inside the Mandelbrot set, it must be iterated until it either hits a maximum number threshold or has a magnitude greater than 2. Some values in the set increase so slowly, that you could iterate thousands and thousands of times before it reaches the threshold. Values far the edges usually break that threshold pretty fast, however values closer to the edge iterate a larger number of times before breaking the threshold. Keep in mind that each pixel represents a point that must be iterated through the Mandelbrot algorithm and you can start to understand the problem. </string>
   </property>
   <property name="alignment">
    <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
   </property>
   <property name="wordWrap">
    <bool>true</bool>
   </property>
   <property name="margin">
    <number>10</number>
   </property>
  </widget>
  <widget class="QLabel" name="Body_6">
   <property name="geometry">
    <rect>
     <x>110</x>
     <y>420</y>
     <width>411</width>
     <height>111</height>
    </rect>
   </property>
   <property name="font">
    <font>
     <family>Futura</family>
     <pointsize>10</pointsize>
    </font>
   </property>
   <property name="text">
    <string>     Still need some perspective? Imagine that each pixel had to iterate the default cap: 80 iterations. If the default window size is 800 x 600, that means the computer must calculate the loop 800*6000*80 times. That’s 38.4 million times. Even worse, for each iteration, the computer has to multiply two complex numbers (a + bi) and add the original one. Thankfully, computers are really good at math, so it loads in a few seconds for fairly small zoom.</string>
   </property>
   <property name="alignment">
    <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
   </property>
   <property name="wordWrap">
    <bool>true</bool>
   </property>
   <property name="margin">
    <number>10</number>
   </property>
  </widget>
 </widget>
 <resources>
  <include location="Icons.qrc"/>
 </resources>
 <connections/>
</ui>
